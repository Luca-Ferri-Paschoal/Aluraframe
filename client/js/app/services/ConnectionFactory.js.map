{"version":3,"file":"ConnectionFactory.js","names":["ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","target","result","onsuccess","close","bind","onerror","console","log","error","name","connection","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"sources":["../../app-es6/services/ConnectionFactory.js"],"sourcesContent":["class ConnectionFactory {\r\n    static #stores = ['negociacoes'];\r\n    static #version = 5;\r\n    static #dbName = 'aluraframe';\r\n    static #connection = null;\r\n    static #metodoClose = null;\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = window.indexedDB.open(this.#dbName, this.#version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n                ConnectionFactory.#createStore(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = event => {\r\n                if (this.#connection === null) {\r\n                    this.#connection = event.target.result;\r\n\r\n                    this.#metodoClose = this.#connection.close.bind(this.#connection);\r\n\r\n                    this.#connection.close = function() {\r\n                        throw new Error('Você não pode fechar diretamente uma conexão.');\r\n                    };\r\n                }\r\n\r\n                resolve(this.#connection);\r\n            };\r\n\r\n            openRequest.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static #createStore(connection) {\r\n\r\n        this.#stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n\r\n        })\r\n\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (this.#connection !== null) {\r\n            this.#metodoClose();\r\n            //Sem usar o bind, você pode fazer o seguite:\r\n            //Reflect.apply(close, this.#connection, []);\r\n            this.#connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n/* Usando o padrão de projeto Module Pattern, sem usar atributos estáticos, usando var e colocando tudo dentro do escopo de uma função anônima autoinvocável:\r\n\r\n\r\nvar ConnectionFactory = (function () {\r\n\r\n    var stores = ['negociacoes'];\r\n    var version = 5;\r\n    var dbName = 'aluraframe';\r\n    var connection = null;\r\n    \r\n    return class ConnectionFactory {\r\n    \r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n        }\r\n    \r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                const openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = event => {\r\n                    ConnectionFactory.#createStore(event.target.result);\r\n                };\r\n    \r\n                openRequest.onsuccess = event => {\r\n                    if (connection === null) {\r\n                        connection = event.target.result;\r\n                    }\r\n    \r\n                    resolve(connection);\r\n                };\r\n    \r\n                openRequest.onerror = event => {\r\n                    console.log(event.target.error);\r\n                    reject(event.target.error.name);\r\n                };\r\n            });\r\n        }\r\n    \r\n        static #createStore(connection) {\r\n    \r\n            stores.forEach(store => {\r\n    \r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n    \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n    \r\n            })\r\n    \r\n        }\r\n    }\r\n\r\n})();\r\n*/\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAAMA,iB;EAOF,6BAAc;IAAA;;IACV,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;EACH;;;;WAED,yBAAuB;MAAA;;MACnB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACpC,IAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,iCAAsB,KAAtB,EAb1BR,iBAa0B,4CAAoC,KAApC,EAb1BA,iBAa0B,YAApB;;QAEAK,WAAW,CAACI,eAAZ,GAA8B,UAAAC,KAAK,EAAI;UACnC,6BAAAV,iBAAiB,EAhB3BA,iBAgB2B,eAAjB,MAAAA,iBAAiB,EAAcU,KAAK,CAACC,MAAN,CAAaC,MAA3B,CAAjB;QACH,CAFD;;QAIAP,WAAW,CAACQ,SAAZ,GAAwB,UAAAH,KAAK,EAAI;UAC7B,IAAI,qCAAI,EApBlBV,iBAoBkB,cAAJ,KAAqB,IAAzB,EAA+B;YAC3B,qCAAI,EArBlBA,iBAqBkB,eAAeU,KAAK,CAACC,MAAN,CAAaC,MAA5B,CAAJ;;YAEA,qCAAI,EAvBlBZ,iBAuBkB,gBAAgB,qCAAI,EAvBtCA,iBAuBsC,cAAJ,CAAiBc,KAAjB,CAAuBC,IAAvB,iCAA4B,KAA5B,EAvBlCf,iBAuBkC,eAAhB,CAAJ;;YAEA,qCAAI,EAzBlBA,iBAyBkB,cAAJ,CAAiBc,KAAjB,GAAyB,YAAW;cAChC,MAAM,IAAIb,KAAJ,CAAU,+CAAV,CAAN;YACH,CAFD;UAGH;;UAEDE,OAAO,iCAAC,KAAD,EA9BjBH,iBA8BiB,eAAP;QACH,CAZD;;QAcAK,WAAW,CAACW,OAAZ,GAAsB,UAAAN,KAAK,EAAI;UAC3BO,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACC,MAAN,CAAaQ,KAAzB;UACAf,MAAM,CAACM,KAAK,CAACC,MAAN,CAAaQ,KAAb,CAAmBC,IAApB,CAAN;QACH,CAHD;MAIH,CAzBM,CAAP;IA0BH;;;WAgBD,2BAAyB;MACrB,IAAI,sCAvDNpB,iBAuDM,mBAAqB,IAAzB,EAA+B;QAC3B,sCAxDNA,iBAwDM,2BAD2B,CAE3B;QACA;;;QACA,sCA3DNA,iBA2DM,eAAmB,IAAnB;MACH;IACJ;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;sBA/EwBqB,U,EAAY;EAE5B,sCA1CFrB,iBA0CE,WAAasB,OAAb,CAAqB,UAAAC,KAAK,EAAI;IAE1B,IAAIF,UAAU,CAACG,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;MAC7CF,UAAU,CAACK,iBAAX,CAA6BH,KAA7B;IACH;;IAEDF,UAAU,CAACM,iBAAX,CAA6BJ,KAA7B,EAAoC;MAAEK,aAAa,EAAE;IAAjB,CAApC;EAEH,CARD;AAUH;;;;SAnDgB,CAAC,aAAD;;;;SACC;;;;SACD;;;;SACI;;;;SACC"}