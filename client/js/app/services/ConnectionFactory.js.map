{"version":3,"file":"ConnectionFactory.js","names":["connection","ConnectionFactory","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","target","result","onsuccess","close","bind","onerror","console","log","error","name"],"sources":["../../app-es6/services/ConnectionFactory.js"],"sourcesContent":["export class ConnectionFactory {\r\n    static #stores = ['negociacoes'];\r\n    static #version = 5;\r\n    static #dbName = 'aluraframe';\r\n    static #connection = null;\r\n    static #metodoClose = null;\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = window.indexedDB.open(this.#dbName, this.#version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n                ConnectionFactory.#createStore(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = event => {\r\n                if (this.#connection === null) {\r\n                    this.#connection = event.target.result;\r\n\r\n                    this.#metodoClose = this.#connection.close.bind(this.#connection);\r\n\r\n                    this.#connection.close = function() {\r\n                        throw new Error('Você não pode fechar diretamente uma conexão.');\r\n                    };\r\n                }\r\n\r\n                resolve(this.#connection);\r\n            };\r\n\r\n            openRequest.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static #createStore(connection) {\r\n\r\n        this.#stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n\r\n        })\r\n\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (this.#connection !== null) {\r\n            this.#metodoClose();\r\n            //Sem usar o bind, você pode fazer o seguite:\r\n            //Reflect.apply(close, this.#connection, []);\r\n            this.#connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n/* Usando o padrão de projeto Module Pattern, sem usar atributos estáticos, usando var e colocando tudo dentro do escopo de uma função anônima autoinvocável:\r\n\r\n\r\nvar ConnectionFactory = (function () {\r\n\r\n    var stores = ['negociacoes'];\r\n    var version = 5;\r\n    var dbName = 'aluraframe';\r\n    var connection = null;\r\n    \r\n    return class ConnectionFactory {\r\n    \r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory.');\r\n        }\r\n    \r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                const openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = event => {\r\n                    ConnectionFactory.#createStore(event.target.result);\r\n                };\r\n    \r\n                openRequest.onsuccess = event => {\r\n                    if (connection === null) {\r\n                        connection = event.target.result;\r\n                    }\r\n    \r\n                    resolve(connection);\r\n                };\r\n    \r\n                openRequest.onerror = event => {\r\n                    console.log(event.target.error);\r\n                    reject(event.target.error.name);\r\n                };\r\n            });\r\n        }\r\n    \r\n        static #createStore(connection) {\r\n    \r\n            stores.forEach(store => {\r\n    \r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n    \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n    \r\n            })\r\n    \r\n        }\r\n    }\r\n\r\n})();\r\n*/\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAwCwBA,U,EAAY;IAE5B,sCA1CKC,iBA0CL,WAAaC,OAAb,CAAqB,UAAAC,KAAK,EAAI;MAE1B,IAAIH,UAAU,CAACI,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;QAC7CH,UAAU,CAACM,iBAAX,CAA6BH,KAA7B;MACH;;MAEDH,UAAU,CAACO,iBAAX,CAA6BJ,KAA7B,EAAoC;QAAEK,aAAa,EAAE;MAAjB,CAApC;IAEH,CARD;EAUH;;;;;mCApDQP,iB;QAOT,6BAAc;UAAA;;UACV,MAAM,IAAIQ,KAAJ,CAAU,uDAAV,CAAN;QACH;;;;iBAED,yBAAuB;YAAA;;YACnB,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;cACpC,IAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,iCAAsB,KAAtB,EAbnBf,iBAamB,4CAAoC,KAApC,EAbnBA,iBAamB,YAApB;;cAEAY,WAAW,CAACI,eAAZ,GAA8B,UAAAC,KAAK,EAAI;gBACnC,6BAAAjB,iBAAiB,EAhBpBA,iBAgBoB,eAAjB,MAAAA,iBAAiB,EAAciB,KAAK,CAACC,MAAN,CAAaC,MAA3B,CAAjB;cACH,CAFD;;cAIAP,WAAW,CAACQ,SAAZ,GAAwB,UAAAH,KAAK,EAAI;gBAC7B,IAAI,qCAAI,EApBXjB,iBAoBW,cAAJ,KAAqB,IAAzB,EAA+B;kBAC3B,qCAAI,EArBXA,iBAqBW,eAAeiB,KAAK,CAACC,MAAN,CAAaC,MAA5B,CAAJ;;kBAEA,qCAAI,EAvBXnB,iBAuBW,gBAAgB,qCAAI,EAvB/BA,iBAuB+B,cAAJ,CAAiBqB,KAAjB,CAAuBC,IAAvB,iCAA4B,KAA5B,EAvB3BtB,iBAuB2B,eAAhB,CAAJ;;kBAEA,qCAAI,EAzBXA,iBAyBW,cAAJ,CAAiBqB,KAAjB,GAAyB,YAAW;oBAChC,MAAM,IAAIb,KAAJ,CAAU,+CAAV,CAAN;kBACH,CAFD;gBAGH;;gBAEDE,OAAO,iCAAC,KAAD,EA9BVV,iBA8BU,eAAP;cACH,CAZD;;cAcAY,WAAW,CAACW,OAAZ,GAAsB,UAAAN,KAAK,EAAI;gBAC3BO,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACC,MAAN,CAAaQ,KAAzB;gBACAf,MAAM,CAACM,KAAK,CAACC,MAAN,CAAaQ,KAAb,CAAmBC,IAApB,CAAN;cACH,CAHD;YAIH,CAzBM,CAAP;UA0BH;;;iBAgBD,2BAAyB;YACrB,IAAI,sCAvDC3B,iBAuDD,mBAAqB,IAAzB,EAA+B;cAC3B,sCAxDCA,iBAwDD,2BAD2B,CAE3B;cACA;;;cACA,sCA3DCA,iBA2DD,eAAmB,IAAnB;YACH;UACJ;;;;;;;;;;eA5DgB,CAAC,aAAD;;;;eACC;;;;eACD;;;;eACI;;;;eACC"}