{"version":3,"file":"HTTPService.js","names":["HTTPService","url","fetch","then","resposta","json","dado","headers","method","body","JSON","stringify","ok","Error","statusText"],"sources":["../../app-es6/services/HTTPService.js"],"sourcesContent":["class HTTPService {\r\n\r\n    #handleErrors(resposta) {\r\n        if (!resposta.ok) throw new Error(resposta.statusText);\r\n        \r\n        return resposta;\r\n    }\r\n\r\n    get(url) {\r\n        return fetch(url)\r\n        .then(resposta => this.#handleErrors(resposta))\r\n        .then(resposta => resposta.json());\r\n\r\n        //A fecth API simplifica muito as coisas. Dá uma olhada no código usando XMLHttpRequest():\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n    \r\n            xhr.open('GET', url);\r\n    \r\n            xhr.onreadystatechange = () => { \r\n    \r\n                if(xhr.readyState === 4) {\r\n                    if(xhr.status === 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n    \r\n            }\r\n    \r\n            xhr.send();\r\n        });*/\r\n    }\r\n\r\n    post(url, dado) {\r\n        return fetch(url, {\r\n            headers: { 'Content-type' : 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify(dado),\r\n        })\r\n        .then(resposta => this.#handleErrors(resposta));\r\n        \r\n        //.then(resposta => this.#handleErrors(resposta));\r\n        \r\n        /*return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n    \r\n            xhr.open('Post', url, true);\r\n            \r\n            xhr.setRequestHeader('Content-Type', 'application/JSON');\r\n\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if(xhr.readyState === 4) {\r\n                    if(xhr.status === 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            xhr.send(JSON.stringify(dado));\r\n        });*/\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;IAAMA,W;;;;;;;;;WAQF,aAAIC,GAAJ,EAAS;MAAA;;MACL,OAAOC,KAAK,CAACD,GAAD,CAAL,CACNE,IADM,CACD,UAAAC,QAAQ;QAAA,8BAAI,KAAJ,sCAAI,KAAJ,EAAuBA,QAAvB;MAAA,CADP,EAEND,IAFM,CAED,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACC,IAAT,EAAJ;MAAA,CAFP,CAAP,CADK,CAKL;;MAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAMK;;;WAED,cAAKJ,GAAL,EAAUK,IAAV,EAAgB;MAAA;;MACZ,OAAOJ,KAAK,CAACD,GAAD,EAAM;QACdM,OAAO,EAAE;UAAE,gBAAiB;QAAnB,CADK;QAEdC,MAAM,EAAE,MAFM;QAGdC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;MAHQ,CAAN,CAAL,CAKNH,IALM,CAKD,UAAAC,QAAQ;QAAA,8BAAI,MAAJ,sCAAI,MAAJ,EAAuBA,QAAvB;MAAA,CALP,CAAP,CADY,CAQZ;;MAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAMK;;;;;;wBAjEaA,Q,EAAU;EACpB,IAAI,CAACA,QAAQ,CAACQ,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAUT,QAAQ,CAACU,UAAnB,CAAN;EAElB,OAAOV,QAAP;AACH"}